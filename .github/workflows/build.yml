name: Build binaries

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  prepare:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      publish-version: ${{ steps.set-version.outputs.publish_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Get version from tag
        if: ${{ startsWith(github.ref, 'refs/tags/v') == true}}
        run: |
          PUBLISH_VERSION="${GITHUB_REF_NAME:1}"
          echo "publish_version=$PUBLISH_VERSION" >> $GITHUB_ENV

      - name: Get version from next.version property
        if: ${{ startsWith(github.ref, 'refs/tags/v') == false}}
        run: |
          PUBLISH_VERSION="$(grep "version.next" gradle.properties | awk -F '=' '{print $2}')"
          echo "publish_version=$PUBLISH_VERSION" >> $GITHUB_ENV

      - name: Set version to outputs
        id: set-version
        run: |
          echo "::set-output name=publish_version::${{ env.publish_version }}"
          echo "version: ${{ env.publish_version }}"

  dmg:
    name: Generate DMG
    if: ${{ startsWith(github.ref, 'refs/tags/v') == false }}
    runs-on: macos-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: gradle

      - name: Build DMG
        run: ./gradlew --no-daemon packageDmg

  exe:
    name: Generate EXE
    runs-on: windows-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: gradle

      - name: Build EXE
        run: ./gradlew --no-daemon packageExe -PpublishVersion="${{ needs.prepare.outputs.publish-version }}"

      - name: Upload EXE
        uses: actions/upload-artifact@v2
        if: ${{ startsWith(github.ref, 'refs/tags/v') == true}}
        with:
          name: exe
          path: build/compose/binaries/main/exe/TvLauncherInstaller-${{ needs.prepare.outputs.publish-version }}.exe

  deb:
    name: Generate DEB
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: gradle

      - name: Build DEB
        run: ./gradlew --no-daemon packageDeb -PpublishVersion="${{ needs.prepare.outputs.publish-version }}"

      - name: Upload DEB
        uses: actions/upload-artifact@v2
        if: ${{ startsWith(github.ref, 'refs/tags/v') == true}}
        with:
          name: deb
          path: build/compose/binaries/main/deb/tvlauncherinstaller_${{ needs.prepare.outputs.publish-version }}-1_amd64.deb

  rpm:
    name: Generate RPM
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: gradle

      - name: Build RPM
        run: ./gradlew --no-daemon packageRpm -PpublishVersion="${{ needs.prepare.outputs.publish-version }}"

      - name: Upload RPM
        uses: actions/upload-artifact@v2
        if: ${{ startsWith(github.ref, 'refs/tags/v') == true}}
        with:
          name: rpm
          path: build/compose/binaries/main/rpm/tvlauncherinstaller-${{ needs.prepare.outputs.publish-version }}-1.x86_64.rpm

  noterize-dmg:
    name: Noterize DMG
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: macos-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: set up JDK 16
        uses: actions/setup-java@v2
        with:
          java-version: '16'
          distribution: 'adopt'
          cache: gradle

      - name: Install Apple signing certificate
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.CERTIFICATE_DATA }}
          P12_PASSWORD: ${{ secrets.CERTIFICATE_PASSPHRASE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          echo "KEYCHAIN_PATH=$KEYCHAIN_PATH" >> $GITHUB_ENV

      - name: Set gradle properties
        env:
          APPLE_IDENTITY: ${{ secrets.APPLE_IDENTITY }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLICATION_PASSWORD: ${{ secrets.APPLICATION_PASSWORD }}
        run: |
          echo "compose.desktop.mac.sign=true" >> gradle.properties
          echo "compose.desktop.mac.signing.identity=$APPLE_IDENTITY" >> gradle.properties
          echo "compose.desktop.mac.signing.keychain=$KEYCHAIN_PATH" >> gradle.properties
          echo "compose.desktop.mac.notarization.appleID=$APPLE_ID" >> gradle.properties
          echo "compose.desktop.mac.notarization.password=$APPLICATION_PASSWORD" >> gradle.properties

      - name: Build & notarize DMG
        run: ./gradlew --no-daemon notarizeDmg -PpublishVersion="${{ needs.prepare.outputs.publish-version }}"

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: dmg
          path: build/compose/binaries/main/dmg/TvLauncherInstaller-${{ needs.prepare.outputs.publish-version }}.dmg


  release:
    name: Release binaries
    needs: [ noterize-dmg, exe, deb, rpm ]
    if: ${{ startsWith(github.ref, 'refs/tags/v') }}
    runs-on: ubuntu-latest
    steps:
      - name: Get version from tag
        run: |
          PUBLISH_VERSION="${GITHUB_REF_NAME:1}"
          echo "publish_version=$PUBLISH_VERSION" >> $GITHUB_ENV
          echo "version: $PUBLISH_VERSION"

      - name: Download binaries from build
        uses: actions/download-artifact@v2

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}

      - name: Upload DMG binary
        id: upload_dmg_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dmg/TvLauncherInstaller-${{ env.publish_version }}.dmg
          asset_name: tvlauncher-installer-v${{ env.publish_version }}.dmg
          asset_content_type: application/vnd.apple.diskimage

      - name: Upload EXE binary
        id: upload_exe_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: exe/TvLauncherInstaller-${{ env.publish_version }}.exe
          asset_name: tvlauncher-installer-v${{ env.publish_version }}.exe
          asset_content_type: application/vnd.microsoft.portable-executable

      - name: Upload DEB binary
        id: upload_deb_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: deb/tvlauncherinstaller_${{ env.publish_version }}-1_amd64.deb
          asset_name: tvlauncher-installer-v${{ env.publish_version }}_amd64.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload RPM binary
        id: upload_rpm_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: rpm/tvlauncherinstaller-${{ env.publish_version }}-1.x86_64.rpm
          asset_name: tvlauncher-installer-v${{ env.publish_version }}.x86_64.rpm
          asset_content_type: application/x-rpm